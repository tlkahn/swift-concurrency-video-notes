* Untitled

[fn:2]

** Async/Await, Task
** Structured concurrency

*** Tasks

- A new async context for executing code concurrently.
- Enable devs to run code in parallel.
- Examples:
  + async let
    This create a child task to execute code, so the parent task can proceed with executing any following statements after it until it needs to access its result.
    Once it reaches an expr that needs the actual value of the result, the parent will await the completion of the child task.

    #+begin_src swift
      let _ = try await todoService.fetch(id: 1)
      // vs.
      async let _ = todoService.fetch(id: 1)
    #+end_src

    [[./async-tree.png]]

    Whenc creating a task we can use ~.cancel()~ to cancel it. Swift tasks use [[https://www.hackingwithswift.com/books/concurrency/how-to-cancel-a-task][cooperative cancellation]].
  + group tasks
    ~.task()~ method for SwiftUI View objects.
    #+begin_quote
      Use this modifier to perform an asynchronous task with a lifetime that matches that of the modified view. If the task doesn’t finish before SwiftUI removes the view or the view changes identity, SwiftUI cancels the task.

      Use the await keyword inside the task to wait for an asynchronous call to complete, or to wait on the values of an AsyncSequence instance. For example, you can modify a Text view to start a task that loads content from a remote resource:
    #+end_quote

     Rather than creating a TaskGroup instance directly, we do so by calling the withTaskGroup(of:) function and telling it the data type the task group will return.

     We call addTask() once for each task we want to add to the group, passing in the work we want that task to do.

     Tasks created using withTaskGroup() cannot throw errors. If you want them to be able to throw errors that bubble upwards – i.e., that are handled outside the task group – you should use withThrowingTaskGroup() instead.

     Good examples can be found [[https://www.hackingwithswift.com/quick-start/concurrency/how-to-create-a-task-group-and-add-tasks-to-it][here]].

     Which you choose – Task or TaskGroup – depends on the goal of your work: if you want one or two independent pieces of work to start, then Task is the right choice. If you want to split up one job into several concurrent operations then TaskGroup is a better fit. Task groups work best when their individual operations return exactly the same kind of data, but with a little extra effort you can coerce them into supporting heterogenous data types.

     We cannot control when a child task finishes its execution. Therefore, we should not use a task group if we want the child tasks to finish in a specific order.
  + unstructured tasks
  + detached tasks [fn:1]
    Similar to unstructured tasks where you have to have manually execute cancel & await. *The lifetime of the scope for detached tasks is not bound to where it was executed. Sow we can manage this from outside the scope where those tasks were launched.*

    You can create by using ~.detached~.

    #+begin_src swift
      Task.detached(priority: .background) {
        self.service.cache(iamge: image)
        ...
      }
    #+end_src

    No parent.

*** Continuation

Allow bridging older old that may not support ~async~ func. aka., we can wrap our existing closure based code in a continuation to gain async capabilities. [fn:4] Continuation is a monadic object which yield either a result or a continuation. Continuations must yield a result only on each path. [fn:3]

#+begin_src swift
  func getQuotes() async -> [Quote] {
      return await withCheckedContinuation {continuation in
          service.fetchQuotes {res in
              let quotes = try! res.get()
              continuation.resume(returning: quotes)
          }
      }
      // vs.
      return await withCheckedThrowingContinuation {continuation in
          service.fetchQuotes {quotes in
              switch res {
              case .success(let quotes):
                  continuation.resume(returning: quotes)
              case .failure(let error):
                  continuation.resume(throwing: error)
              }
          }
      }
  }
#+end_src

*** Actors

Actors allow us to protect mutable state (more precisely, *data races*).

Data races happen when more than one thread concurrently access the same data. Current ways to previent:

- atomics
- locks
- serial dispatch queues

  Actors help synchronize shared mutable state, i.e. concurrent code trying to update an object from multiple threads. Actors have their own isolated state from the rest of your program. In order to change the state, you must go through the actors.

  Actor is a new Type in swift -  a reference type. They get the same capabilities as classes - methods, properties, etc.

  A series on swift Actor by Paul Hadson:

  - [[https://www.hackingwithswift.com/books/concurrency/what-is-an-actor-and-why-does-swift-have-them][What is an actor and why does Swift have them? - a free Swift Concurrency by Example tutorial]]

    #+begin_src swift
      actor User {
          var score = 10

          func printScore() {
              print("My score is \(score)")
          }

          func copyScore(from other: User) async {
              score = await other.score // <<== Monadic
          }
      }

        <!-- INSIDE MAIN -->
        let actor1 = User()
      let actor2 = User()

      await print(actor1.score)
      await actor1.copyScore(from: actor2)
    #+end_src
  - [[https://www.hackingwithswift.com/books/concurrency/how-to-create-and-use-an-actor-in-swift][How to create and use an actor in Swift - a free Swift Concurrency by Example tutorial]]
    Creating and using an actor in Swift takes two steps: create the type using actor rather than class or struct, then use await when accessing its properties or methods externally. Swift takes care of everything else for us, including ensuring that properties and methods must be accessed safely.

    #+begin_src swift
      actor URLCache {
          private var cache = [URL: Data]()

          func data(for url: URL) async throws -> Data {
              if let cached = cache[url] {
                  return cached
              }

              let (data, _) = try await URLSession.shared.data(from: url)
              cache[url] = data
              return data
          }
      }

      @main
      struct App {
          static func main() async throws {
              let cache = URLCache()

              let url = URL(string: "https://apple.com")!
              let apple = try await cache.data(for: url)
              let dataString = String(decoding: apple, as: UTF8.self)
              print(dataString)
          }
      }

    #+end_src

    The real protection here is that the property and method are both encapsulated inside an actor, which means *only a single thread can use them at any given time*.

    It’s really important you keep in mind the serial queue behavior of actors, because it’s entirely possible you can create massive speed bumps in your code just because you wrote actor rather than class. Think about the URL cache we just made, for example – just by using actor rather than class when we made it, we forced it to load only a single URL at a time. If that’s what you want then you’re all set, but if not then you’ll be wondering why all its requests are handled one by one.

    A canonical example:

    #+begin_src swift
      class BankAccount {
          var balance: Decimal

          init(initialBalance: Decimal) {
              balance = initialBalance
          }

          func deposit(amount: Decimal) {
              balance = balance + amount
          }

          func transfer(amount: Decimal, to other: BankAccount) {
              // Check that we have enough money to pay
              guard balance > amount else { return }

              // Subtract it from our balance
              balance = balance - amount

              // Send it to the other account
              other.deposit(amount: amount)
          }
      }

      // <!-- INSIDE MAIN -->
      let firstAccount = BankAccount(initialBalance: 500)
      let secondAccount = BankAccount(initialBalance: 0)
      firstAccount.transfer(amount: 500, to: secondAccount)
    #+end_src

    Do you see the problem there? Well, what happens if the account we’re transferring from contains $100, and we’re asked to transfer $80 to the other account? If we follow the steps above, both calls to transfer() will happen in parallel and see that there was enough for the transfer to take place, then both will transfer the money across. The end result is that our check for sufficient funds wasn’t useful, and one account ends up with -$60 – something that might incur fees, or perhaps not even be allowed depending on the type of account they have.

    #+begin_src swift
      actor BankAccount {
          var balance: Decimal

          init(initialBalance: Decimal) {
              balance = initialBalance
          }

          func deposit(amount: Decimal) {
              balance = balance + amount
          }

          func transfer(amount: Decimal, to other: BankAccount) async {
              // Check that we have enough money to pay
              guard balance > amount else { return }

              // Subtract it from our balance
              balance = balance - amount

              // Send it to the other account
              await other.deposit(amount: amount)
          }
      }

        <!-- INSIDE MAIN -->
        let firstAccount = BankAccount(initialBalance: 500)
      let secondAccount = BankAccount(initialBalance: 0)
      await firstAccount.transfer(amount: 500, to: secondAccount)
    #+end_src
  - [[https://www.hackingwithswift.com/books/concurrency/how-to-make-function-parameters-isolated][How to make function parameters isolated - a free Swift Concurrency by Example tutorial]]

    You can make external functions isolated to an actor if you want. This allows the function to access actor-isolated state as if it were inside that actor, without needing to use await.

    #+begin_src swift
      actor DataStore {
          var username = "Anonymous"
          var friends = [String]()
          var highScores = [Int]()
          var favorites = Set<Int>()

          init() {
              // load data here
          }

          func save() {
              // save data here
          }
      }

      func debugLog(dataStore: isolated DataStore) {
          print("Username: \(dataStore.username)")
          print("Friends: \(dataStore.friends)")
          print("High scores: \(dataStore.highScores)")
          print("Favorites: \(dataStore.favorites)")
      }

      // <!-- INSIDE MAIN -->
      let data = DataStore()
      await debugLog(dataStore: data)
    #+end_src

    #+begin_src swift
      import CryptoKit
      import Foundation

      actor User {
          let username: String
          let password: String
          var isOnline = false

          init(username: String, password: String) {
              self.username = username
              self.password = password
          }

          nonisolated func passwordHash() -> String {
              let passwordData = Data(password.utf8)
              let hash = SHA256.hash(data: passwordData)
              return hash.compactMap { String(format: "%02x", $0) }.joined()
          }
      }

        <!-- INSIDE MAIN -->
        let user = User(username: "twostraws", password: "s3kr1t")
      print(user.passwordHash())
    #+end_src

- Marking passwordHash() as nonisolated means that we can call it externally without using await.
- We can also use nonisolated with computed properties, which in the previous example would have made nonisolated var passwordHash: String. Stored properties may not be non-isolated.
- Non-isolated properties and methods can access only other non-isolated properties and methods, which in our case is a constant property. Swift will not let you ignore this rule.

  - [[https://www.hackingwithswift.com/books/concurrency/how-to-make-parts-of-an-actor-nonisolated][How to make parts of an actor nonisolated - a free Swift Concurrency by Example tutorial]] and [[https://www.avanderlee.com/swift/nonisolated-isolated/][Nonisolated and isolated keywords: Understanding Actor isolation]]
  - [[https://www.hackingwithswift.com/books/concurrency/how-to-use-mainactor-to-run-code-on-the-main-queue][How to use @MainActor to run code on the main queue - a free Swift Concurrency by Example tutorial]]
  - [[https://www.hackingwithswift.com/books/concurrency/understanding-how-global-actor-inference-works][Understanding how global actor inference works - a free Swift Concurrency by Example tutorial]]
  - [[https://www.hackingwithswift.com/books/concurrency/what-is-actor-hopping-and-how-can-it-cause-problems][What is actor hopping and how can it cause problems? - a free Swift Concurrency by Example tutorial]]
  - [[https://www.hackingwithswift.com/books/concurrency/whats-the-difference-between-actors-classes-and-structs][What’s the difference between actors, classes, and structs? - a free Swift Concurrency by Example tutorial]]
  - [[https://www.hackingwithswift.com/books/concurrency/important-do-not-use-an-actor-for-your-swiftui-data-models][Important: Do not use an actor for your SwiftUI data models - a free Swift Concurrency by Example tutorial]]
  - [[https://www.swiftbysundell.com/articles/swift-actors/][Swift actors: How do they work, and what kinds of problems do they solve? | Swift by Sundell]]

*Actor Reentrancy*

*Only perform mutatations within actors with synchronous code & guard the state after your program resumes from a suspension state*.

* Footnotes

[fn:4] [[https://wwdcbysundell.com/2021/wrapping-completion-handlers-into-async-apis/][Wrapping completion handlers into async APIs | WWDC by Sundell & Friends]]

[fn:3] [[https://www.hackingwithswift.com/quick-start/concurrency/how-to-use-continuations-to-convert-completion-handlers-into-async-functions][How to use continuations to convert completion handlers into async functions - a free Swift Concurrency by Example tutorial]]

[fn:1] [[https://www.hackingwithswift.com/quick-start/concurrency/whats-the-difference-between-a-task-and-a-detached-task][What’s the difference between a task and a detached task? - a free Swift Concurrency by Example tutorial]]

[fn:2] [[https://www.youtube.com/watch?v=U6lQustiTGE&t=45s][Getting Started with Swift Concurrency (Async Await, Actors, Continuations, Tasks) - YouTube]]
